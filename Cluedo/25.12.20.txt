#include "MainWindow.h"


constexpr unsigned long chromakey = 4281558681;
template <typename T> void SafeRelease(T** ppT) {
	if (*ppT) {
		(*ppT)->Release();
		*ppT = nullptr;
	}
}

HRESULT MainWindow::CreateGraphicsResources() {
	HRESULT hr = S_OK;
	GetClientRect(m_hwnd, &rc);
	pDepthBuffer = new float[rc.right * rc.bottom];
	pixelArray = new unsigned long[rc.right * rc.bottom];
	std::fill_n(pixelArray, rc.right * rc.bottom, 0xFF30FFFF);
	return hr;
}

void MainWindow::DiscardGraphicsResources() {
	if (pDepthBuffer)delete[]pDepthBuffer;
	if (pixelArray)delete[]pixelArray;
}

bool MainWindow::OnCreate() {
	if (FAILED(D2D1CreateFactory(
		D2D1_FACTORY_TYPE_SINGLE_THREADED, &pFactory))) {
		return false;// -1; // Fail CreateWindowEx.
	}
	meshPtr = new Mesh();
	meshPtr->tris = {
		{{-1925.0f, 3000.0f, 2500.0f, 1.0f}, {-1925.0f, -1000.0f, 2500.0f, 1.0f}, {3000.0f, -1000.0f, 2500.0f, 1.0f}, 0xFFFFFFFF, L"klu.bmp", {0.0f, 0.0f, -1.0f}, {0.0f, 1.0f, 1.0f}, {0.0f, 0.0f, 1.0f}, {1.0f, 0.0f, 1.0f},},
		{{-1925.0f, 3000.0f, 2500.0f, 1.0f}, {3000.0f, -1000.0f, 2500.0f, 1.0f}, {3000.0f, 3000.0f, 2500.0f, 1.0f}, 0xFFFFFFFF, L"klu.bmp", {0.0f, 0.0f, -1.0f}, {0.0f, 1.0f, 1.0f}, {1.0f, 0.0f, 1.0f}, {1.0f, 1.0f, 1.0f},},
	};
	vCamera.x = 500;
	vCamera.y = 1000;
	vCamera.z = 500;
	fYaw = 0.0f;
	/*meshPtr->LoadFromObjectFileRaw("Cluedo");
	vCamera.x = 500;
	vCamera.y = 1000;
	vCamera.z = -500;
	fYaw = 3.1459f;*/
	InvalidateRect(m_hwnd, nullptr, FALSE);
	AppendMenuW(hMenubar, MF_POPUP, (UINT_PTR)hMenu, L"File");
	AppendMenuW(hMenubar, MF_POPUP, (UINT_PTR)hAccuse, L"Accuse");
	AppendMenuW(hMenubar, MF_POPUP, (UINT_PTR)hRoll, L"Roll Dice");
	AppendMenuW(hMenu, MF_POPUP, (UINT_PTR)hPlayers, L"New Game");
	AppendMenuW(hMenu, MF_STRING, 2, L"3D Cluedo");
	AppendMenuW(hMenu, MF_STRING, 3, L"2D Cluedo");
	AppendMenuW(hPlayers, MF_STRING, 27, L"2");
	AppendMenuW(hPlayers, MF_STRING, 28, L"3");
	AppendMenuW(hPlayers, MF_STRING, 29, L"4");
	AppendMenuW(hPlayers, MF_STRING, 30, L"5");
	AppendMenuW(hPlayers, MF_STRING, 31, L"6");
	AppendMenuW(hRoll, MF_STRING, 1, L"Roll");
	AppendMenuW(hAccuse, MF_POPUP, (UINT_PTR)hSuspect, L"Suspect");
	AppendMenuW(hSuspect, MF_STRING, 4, L"Colonel Mustard");
	AppendMenuW(hSuspect, MF_STRING, 5, L"Reverend Green");
	AppendMenuW(hSuspect, MF_STRING, 6, L"Mrs Peacock");
	AppendMenuW(hSuspect, MF_STRING, 7, L"Professor Plum");
	AppendMenuW(hSuspect, MF_STRING, 8, L"Miss Scarlett");
	AppendMenuW(hSuspect, MF_STRING, 9, L"Mrs White");
	AppendMenuW(hAccuse, MF_POPUP, (UINT_PTR)hRoom, L"Room");
	AppendMenuW(hRoom, MF_STRING, 10, L"Ball Room");
	AppendMenuW(hRoom, MF_STRING, 11, L"Billiard Room");
	AppendMenuW(hRoom, MF_STRING, 12, L"Conservatory");
	AppendMenuW(hRoom, MF_STRING, 13, L"Dining Room");
	AppendMenuW(hRoom, MF_STRING, 14, L"Hall");
	AppendMenuW(hRoom, MF_STRING, 15, L"Kitchen");
	AppendMenuW(hRoom, MF_STRING, 16, L"Library");
	AppendMenuW(hRoom, MF_STRING, 17, L"Lounge");
	AppendMenuW(hRoom, MF_STRING, 18, L"Study");
	AppendMenuW(hAccuse, MF_POPUP, (UINT_PTR)hWeapon, L"Weapon");
	AppendMenuW(hWeapon, MF_STRING, 19, L"Candlestick");
	AppendMenuW(hWeapon, MF_STRING, 20, L"Dagger");
	AppendMenuW(hWeapon, MF_STRING, 21, L"Lead Pipe");
	AppendMenuW(hWeapon, MF_STRING, 22, L"Revolver");
	AppendMenuW(hWeapon, MF_STRING, 23, L"Rope");
	AppendMenuW(hWeapon, MF_STRING, 24, L"Spanner");
	if (numberOfPlayers == 4 || numberOfPlayers == 5)AppendMenuW(hSuspect, MF_STRING, 25, L"Poison");
	if (numberOfPlayers == 4 || numberOfPlayers == 5)AppendMenuW(hSuspect, MF_STRING, 26, L"Axe");
	SetMenu(m_hwnd, hMenubar);
	return true;
}

void MainWindow::Update() {
	std::chrono::time_point<std::chrono::system_clock> m_tp1, m_tp2;
	m_tp1 = std::chrono::system_clock::now();
	InvalidateRect(m_hwnd, nullptr, FALSE);
	HRESULT hr = CreateGraphicsResources();
	if (SUCCEEDED(hr)) {
		PAINTSTRUCT ps;
		Matrix matRotZ, matRotX, matTrans, matWorld, matProj, matCamera, matCameraRot, matView;
		Triangle triTransformed, triViewed, triProjected;
		
		HDC hdc = BeginPaint(m_hwnd, &ps);
		matTrans = Matrix::Matrix_MakeTranslation(0.0f, 0.0f, 5.0f);
		matWorld = Matrix::Matrix_MakeIdentity();	// Form World Matrix
		matWorld = Matrix::Matrix_MultiplyMatrix(matWorld, matTrans); // Transform by translation
		vUp = { 0,1,0 };
		vTarget = { 0,0,1 };
		matCameraRot = Matrix::Matrix_MakeRotationY(fYaw);
		vLookDir = vTarget * matCameraRot;
		vTarget = vCamera + vLookDir;
		matCamera = Matrix::Matrix_PointAt(vCamera, vTarget, vUp);
		matView = Matrix::Matrix_QuickInverse(matCamera);

		// Store Triangles for rastering later
		std::vector<Triangle> vecTrianglesToRaster;

		for (auto& tri : meshPtr->tris) {
			//Collision Detection IMPROVE
			//if (!colliding)bool colliding = Chris::colliding(vCamera, tri);
			//if (!gravity)gravity = Chris::gravity(vCamera, tri);*/

			// World Matrix Transform
			triTransformed.p[0] = tri.p[0] * matWorld;
			triTransformed.p[1] = tri.p[1] * matWorld;
			triTransformed.p[2] = tri.p[2] * matWorld;
			triTransformed.t[0] = tri.t[0];
			triTransformed.t[1] = tri.t[1];
			triTransformed.t[2] = tri.t[2];

			// Get Ray from Triangle to camera
			vCameraRay = triTransformed.p[0] - vCamera;
			vNormal = tri.n;

			// If ray is aligned with normal, then Triangle is visible
			float checker = abs(vCamera.y - tri.p[0].y);
			//float checker2 = Vec3d::Vector_Length2(checker);
			if ((vNormal | vCameraRay) < 0.0f ) {

				// How "aligned" are looking direction and Triangle surface normal?
				float dp = max(0.75f, -1 * (vLookDir | vNormal));
				tri.col == chromakey ? triTransformed.col = 0xFF986532 : 
					triTransformed.col = Chris::pixelMultiply(dp, tri.col); // if !chromakey

				// Convert World Space --> View Space 
				triViewed.p[0] = triTransformed.p[0] * matView;
				triViewed.p[1] = triTransformed.p[1] * matView;
				triViewed.p[2] = triTransformed.p[2] * matView;
				triViewed.col = triTransformed.col;
				triViewed.t[0] = triTransformed.t[0];
				triViewed.t[1] = triTransformed.t[1];
				triViewed.t[2] = triTransformed.t[2];

				// Clip Viewed Triangle against near plane, this could form two additional
				// additional Triangles.
				int nClippedTriangles = 0;
				Triangle clipped[2];
				nClippedTriangles = Chris::Triangle_ClipAgainstPlane({ 0.0f, 0.0f, 0.1f }, { 0.0f, 0.0f, 1.0f }, triViewed, clipped[0], clipped[1]);

				// We may end up with multiple Triangles form the clip, so project as
				// required
				for (int n = 0; n < nClippedTriangles; n++) {
					// Project Triangles from 3D --> 2D
					matProj = Matrix::Matrix_MakeProjection(90.0f, (float)rc.bottom / (float)rc.right, 0.1f, 1000.0f);
					triProjected.p[0] = clipped[n].p[0] * matProj;
					triProjected.p[1] = clipped[n].p[1] * matProj;
					triProjected.p[2] = clipped[n].p[2] * matProj;
					triProjected.col = clipped[n].col;
					triProjected.t[0] = clipped[n].t[0];
					triProjected.t[1] = clipped[n].t[1];
					triProjected.t[2] = clipped[n].t[2];

					triProjected.t[0].u = triProjected.t[0].u / triProjected.p[0].w;
					triProjected.t[1].u = triProjected.t[1].u / triProjected.p[1].w;
					triProjected.t[2].u = triProjected.t[2].u / triProjected.p[2].w;

					triProjected.t[0].v = triProjected.t[0].v / triProjected.p[0].w;
					triProjected.t[1].v = triProjected.t[1].v / triProjected.p[1].w;
					triProjected.t[2].v = triProjected.t[2].v / triProjected.p[2].w;

					triProjected.t[0].w = 1.0f / triProjected.p[0].w;
					triProjected.t[1].w = 1.0f / triProjected.p[1].w;
					triProjected.t[2].w = 1.0f / triProjected.p[2].w;

					// Scale into view, we moved the normalising into cartesian space
					// out of the matrix.vector function from the previous videos, so
					// do this manually
					// 'w' value can be manipulated to make the perspective more accurate
					triProjected.p[1] = Vec3d::Vector_Div(triProjected.p[1], triProjected.p[1].w * 0.85f);
					triProjected.p[0] = Vec3d::Vector_Div(triProjected.p[0], triProjected.p[0].w * 0.85f);
					triProjected.p[2] = Vec3d::Vector_Div(triProjected.p[2], triProjected.p[2].w * 0.85f);

					// X/Y are inverted so put them back
					triProjected.p[0].x *= -1.0f;
					triProjected.p[1].x *= -1.0f;
					triProjected.p[2].x *= -1.0f;
					triProjected.p[0].y *= -1.0f;
					triProjected.p[1].y *= -1.0f;
					triProjected.p[2].y *= -1.0f;

					// Offset verts into visible normalised space
					vOffsetView = { 1,1,0 };
					triProjected.p[0] = triProjected.p[0] + vOffsetView;
					triProjected.p[1] = triProjected.p[1] + vOffsetView;
					triProjected.p[2] = triProjected.p[2] + vOffsetView;
					triProjected.p[0].x *= 0.5f * (float)rc.right;
					triProjected.p[0].y *= 0.5f * (float)rc.bottom;
					triProjected.p[1].x *= 0.5f * (float)rc.right;
					triProjected.p[1].y *= 0.5f * (float)rc.bottom;
					triProjected.p[2].x *= 0.5f * (float)rc.right;
					triProjected.p[2].y *= 0.5f * (float)rc.bottom;
					triProjected.wt = tri.wt;

					// Store Triangle for sorting
					vecTrianglesToRaster.push_back(triProjected);
				}
			}
		}

		HGDIOBJ oldBitmap;
		for (const auto& triToRaster : vecTrianglesToRaster) {
			// Clip Triangles against all four screen edges, this could yield
			// a bunch of Triangles, so create a queue that we traverse to 
			//  ensure we only test new Triangles generated against planes
			Triangle clipped[2];
			std::list<Triangle> listTriangles;

			// Add initial Triangle
			listTriangles.push_back(triToRaster);
			int nNewTriangles = 1;

			for (int p = 0; p < 4; p++) {
				int nTrisToAdd = 0;
				while (nNewTriangles > 0) {
					// Take Triangle from front of queue
					Triangle test = listTriangles.front();
					listTriangles.pop_front();
					nNewTriangles--;

					// Clip it against a plane. We only need to test each 
					// subsequent plane, against subsequent new Triangles
					// as all Triangles after a plane clip are guaranteed
					// to lie on the inside of the plane. I like how this
					// comment is almost completely and utterly justified
					switch (p) {
					case 0:	nTrisToAdd = Chris::Triangle_ClipAgainstPlane({ 0.0f, 0.0f, 0.0f }, { 0.0f, 1.0f, 0.0f }, test, clipped[0], clipped[1]); break;
					case 1:	nTrisToAdd = Chris::Triangle_ClipAgainstPlane({ 0.0f, (float)rc.bottom - 1, 0.0f }, { 0.0f, -1.0f, 0.0f }, test, clipped[0], clipped[1]); break;
					case 2:	nTrisToAdd = Chris::Triangle_ClipAgainstPlane({ 0.0f, 0.0f, 0.0f }, { 1.0f, 0.0f, 0.0f }, test, clipped[0], clipped[1]); break;
					case 3:	nTrisToAdd = Chris::Triangle_ClipAgainstPlane({ (float)rc.right - 1, 0.0f, 0.0f }, { -1.0f, 0.0f, 0.0f }, test, clipped[0], clipped[1]); break;
					}

					// Clipping may yield a variable number of Triangles, so
					// add these new ones to the back of the queue for subsequent
					// clipping against next planes
					for (int w = 0; w < nTrisToAdd; w++)
						listTriangles.push_back(clipped[w]);
				}
				nNewTriangles = listTriangles.size();
			}

			// Draw the transformed, viewed, clipped, projected, sorted, clipped Triangles
			for (auto& t : listTriangles) {
				Chris::FillTriangle(t.p[0].x, t.p[0].y, t.t[0].u, t.t[0].v, t.t[0].w,
					t.p[1].x, t.p[1].y, t.t[1].u, t.t[1].v, t.t[1].w,
					t.p[2].x, t.p[2].y, t.t[2].u, t.t[2].v, t.t[2].w, 
					t.wt, pDepthBuffer, m_hwnd, pixelArray, t.col);
			}
		}

		HBITMAP map = CreateBitmap(rc.right, rc.bottom,
			1, // Color Planes, unfortunately don't know what is it actually. Let it be 1
			8 * 4, // Size of memory for one pixel in bits (in win32 4 bytes = 4*8 bits)
			pixelArray); // pointer to array

		/*****************************************Dummy code for now*/
		HBITMAP hb;
		hb = (HBITMAP)LoadImageW(nullptr, L"Cluedo.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);
		/******************************************/

		HDC src = CreateCompatibleDC(hdc); // hdc - Device context for window, I've got earlier with GetDC(hWnd) or GetDC(NULL);
		oldBitmap = SelectObject(src, hb/*map*/); // Inserting picture into our temp HDC
		// Copy image from temp HDC to window
		BitBlt(hdc, 0, 0, rc.right, rc.bottom, src, 0, 0, SRCCOPY);
		SelectObject(src, oldBitmap);
		DeleteDC(src);
		DeleteObject(oldBitmap);
		DeleteObject(hb/*map*/);
		DiscardGraphicsResources();
		EndPaint(m_hwnd, &ps);
		m_tp2 = std::chrono::system_clock::now();
		std::chrono::duration<float> elapsedTime = m_tp2 - m_tp1;
		updateTime = elapsedTime.count();
		// Uncomment to see frame count.
		//const std::wstring& str = std::to_wstring(1 / elapsedTime.count());
		//SetWindowTextW(m_hwnd, str.c_str());
		m_tp1 = m_tp2;
	}
}

bool MainWindow::suspectChecker(int& a, int& b, int& c, player pa[], room ra[], weapon wa[]){
	_TCHAR szBuffer[100];
	_TCHAR szBuffera[100];
	_TCHAR szBufferb[100];
	_TCHAR szBufferc[100];

	_stprintf_s(szBuffer, _T("You have accused %i in the %i with the %i"), a, b, c);
	_stprintf_s(szBuffera, _T("%i is not the murderer"), a);
	_stprintf_s(szBufferb, _T("%i is not the murder location"), b);
	_stprintf_s(szBufferc, _T("%i is not the murder weapon"), c);
	MessageBox(m_hwnd, szBuffer, _T("Accusation"), MB_OK);
	if (pa[0].makeAccusation(a - 1 , b - 1 , c - 1)) {
		MessageBox(m_hwnd, L"You have won", _T("Winner"), MB_OK);
		return true;
	}
	if (!(pa[0].checkMurder(a - 1))) MessageBox(m_hwnd, szBuffera, _T("Loser"), MB_OK);
	if (!(ra[0].checkMurder(b - 1))) MessageBox(m_hwnd, szBufferb, _T("Loser"), MB_OK);
	if (!(wa[0].checkMurder(c - 1))) MessageBox(m_hwnd, szBufferc, _T("Loser"), MB_OK);
	//else MessageBox(m_hwnd, L"I don't think so", _T("Loser"), MB_OK);
	a = 0;
	b = 0;
	c = 0;
	return false;
}

MainWindow::~MainWindow() {
	if (meshPtr)delete meshPtr;
}

void MainWindow::Resize() {
	GetClientRect(m_hwnd, &rc);
	InvalidateRect(m_hwnd, nullptr, FALSE);
}

MainWindow::MainWindow() :
	meshPtr(nullptr), pFactory(nullptr), pDepthBuffer(nullptr), pixelArray(nullptr), 
	fTheta(0.0f), fYaw(0.0f), updateTime(0.05f),numberOfPlayers(2),chosenRoom(0),chosenSuspect(0),chosenWeapon(0) { }

LRESULT MainWindow::HandleMessage(UINT uMsg, WPARAM wParam, LPARAM lParam) {
	vForward = vLookDir * 1000.0f;
	switch (uMsg) {
	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case 1:
			int score = players[0].rollDice();
			MessageBox(m_hwnd, L"You have rolled a " + score, L"Dice Score", MB_OKCANCEL);
			break;
		case 2:
			if (meshPtr)delete meshPtr;
			meshPtr = new Mesh();
			meshPtr->LoadFromObjectFileRaw("Cluedo");
			vCamera.x = 500;
			vCamera.y = 1000;
			vCamera.z = -500;
			fYaw = 3.1459f;
			InvalidateRect(m_hwnd, nullptr, FALSE);
			break;
		case 3:
			if (meshPtr)delete meshPtr;
			meshPtr = new Mesh();
			meshPtr->tris = {
				{{-1925.0f, 3000.0f, 2500.0f, 1.0f}, {-1925.0f, -1000.0f, 2500.0f, 1.0f}, {3000.0f, -1000.0f, 2500.0f, 1.0f}, 0xFFFFFFFF, L"klu.bmp", {0.0f, 0.0f, -1.0f}, {0.0f, 1.0f, 1.0f}, {0.0f, 0.0f, 1.0f}, {1.0f, 0.0f, 1.0f},},
				{{-1925.0f, 3000.0f, 2500.0f, 1.0f}, {3000.0f, -1000.0f, 2500.0f, 1.0f}, {3000.0f, 3000.0f, 2500.0f, 1.0f}, 0xFFFFFFFF, L"klu.bmp", {0.0f, 0.0f, -1.0f}, {0.0f, 1.0f, 1.0f}, {1.0f, 0.0f, 1.0f}, {1.0f, 1.0f, 1.0f},},
			};
			vCamera.x = 500;
			vCamera.y = 1000;
			vCamera.z = 500;
			fYaw = 0.0f;
			InvalidateRect(m_hwnd, nullptr, FALSE);
			break;
		case 4:
			chosenSuspect = 1;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 5:
			chosenSuspect = 2;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 6:
			chosenSuspect = 3;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 7: 
			chosenSuspect = 4;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 8:
			chosenSuspect = 5;			
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 9:
			chosenSuspect = 6;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 10:
			chosenRoom = 1;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 11:
			chosenRoom = 2;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 12:
			chosenRoom = 3;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 13:
			chosenRoom = 4;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 14:
			chosenRoom = 5;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 15:
			chosenRoom = 6;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 16:
			chosenRoom = 7;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 17:
			chosenRoom = 8;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 18:
			chosenRoom = 9;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 19:
			chosenWeapon = 1;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 20:
			chosenWeapon = 2;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 21:
			chosenWeapon = 3;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 22:
			chosenWeapon = 4;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 23:
			chosenWeapon = 5;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 24:
			chosenWeapon = 6;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 25:
			chosenSuspect = 7;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 26:
			chosenWeapon = 8;
			if (chosenSuspect && chosenRoom && chosenWeapon)suspectChecker(chosenSuspect, chosenRoom, chosenWeapon, players, rooms, weapons);
			break;
		case 27:
			numberOfPlayers = 2;
			players[0].chooseMurder();
			rooms[0].chooseMurder();
			weapons[0].chooseMurder();
			break;
		case 28:
			numberOfPlayers = 3;
			players[0].chooseMurder();
			rooms[0].chooseMurder();
			weapons[0].chooseMurder();
			break;
		case 29:
			numberOfPlayers = 4;
			players[0].chooseMurder();
			rooms[0].chooseMurder();
			weapons[0].chooseMurder();
			break;
		case 30:
			numberOfPlayers = 5;
			players[0].chooseMurder();
			rooms[0].chooseMurder();
			weapons[0].chooseMurder();
			break;
		case 31:
			numberOfPlayers = 6;
			players[0].chooseMurder();
			rooms[0].chooseMurder();
			weapons[0].chooseMurder();
			break;
		}
		break;
	case WM_KEYDOWN:
		if (wParam == VK_LEFT) fYaw -= 1.5708f;
		if (wParam == VK_RIGHT)	fYaw += 1.5708f;
		if (wParam == VK_UP) vCamera = vCamera + vForward;
		return 0;
	case WM_CLOSE:
		if (MessageBox(m_hwnd, L"Really quit?", L"Cluedo", MB_OKCANCEL) == IDOK) 
		DestroyWindow(m_hwnd);
		return 0;
	case WM_DESTROY:
		SafeRelease(&pFactory);
		PostQuitMessage(0);
		return 0;
	case WM_SIZE:
		Resize();
		return 0;
	}
	return DefWindowProc(m_hwnd, uMsg, wParam, lParam);
}







